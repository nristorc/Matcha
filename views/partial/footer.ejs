</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

<script type="text/javascript" src="/js/search.js"></script>

<script src="/socket.io/socket.io.js"></script>

<script>

    let socket = io('http://localhost:3000');
    socket.on('connect', () => {
        socket.emit('identify', {
            token: document.getElementById('token').dataset.token
        });
    });

    var checkOnline = document.querySelector('#checkOnline');
    var chatOnline = document.querySelector('#chatOnline');
    var histoOnline = document.querySelector('.histoOnline');
    var searchOnline = document.querySelector('#searchOnline');

    var userDetails = document.querySelector('#userDetails');
    var userOnline = document.querySelector('#userDetails .fa-circle');
    var userOffline = document.querySelector('.lastConnected');

    const onlineUserPage = (user) => {
         if (userOffline) {
             userOffline.remove();
         }
        if (userOnline === null) {
            const i = document.createElement('i');
            i.setAttribute('class', 'fas fa-circle fa-xs');
            i.setAttribute('style', 'color: green;');
            userDetails.prepend(i);
        }
        userOffline = document.querySelector('.lastConnected');
        userOnline = document.querySelector('#userDetails .fa-circle');
    }
    const offlineUserPage = (user) => {
        if (userOnline) {
            userOnline.remove();
        }
        const p = document.createElement('p');
        p.setAttribute('class', 'lastConnected');
        p.setAttribute('style', 'margin-bottom: 10px; padding: 0; font-size: 12px;');
        const options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };
        p.innerText = 'derniÃ¨re connexion le : ' + new Date().toLocaleDateString('fr-FR', options);
        checkOnline.appendChild(p);
        userOnline = document.querySelector('#userDetails .fa-circle');
        userOffline = document.querySelector('.lastConnected');
    }
    if (checkOnline){
        socket.on('users.new', ({user}) => {
            onlineUserPage(user);
        });

        socket.on('users.leave', ({user}) => {
            offlineUserPage(user);
        })
    }

    const onlineChatPage = (user) => {
        if (document.querySelector('#chatOnline .user' + user.id).style.color === 'red') {
            document.querySelector('#chatOnline .user' + user.id).setAttribute('style', 'color: green;');
        }
    }
    const offlineChatPage = (user) => {
        if (document.querySelector('#chatOnline .user' + user.id).style.color === 'green') {
            document.querySelector('#chatOnline .user' + user.id).setAttribute('style', 'color: red;');
        }
    }
    if (chatOnline) {
        socket.on('users.new', ({user}) => {
            onlineChatPage(user);
        });

        socket.on('users.leave', ({user}) => {
            offlineChatPage(user);
        })
    }

    const onlineHistoPage = (user) => {
        if (document.querySelector('.histoOnline .user' + user.id).style.color === 'red') {
            document.querySelector('.histoOnline .user' + user.id).setAttribute('style', 'color: green;');
        }
    }
    const offlineHistoPage = (user) => {
        if (document.querySelector('.histoOnline .user' + user.id).style.color === 'green') {
            document.querySelector('.histoOnline .user' + user.id).setAttribute('style', 'color: red;');
        }
    }
    if (histoOnline) {
        socket.on('users.new', ({user}) => {
            onlineHistoPage(user);
        });

        socket.on('users.leave', ({user}) => {
            offlineHistoPage(user);
        })
    }

    const onlineSearchPage = (user) => {
        if (document.querySelector('#searchOnline .user' + user.id).style.color === 'red') {
            document.querySelector('#searchOnline .user' + user.id).setAttribute('style', 'color: green;');
        }
    }
    const offlineSearchPage = (user) => {
        if (document.querySelector('#searchOnline .user' + user.id).style.color === 'green') {
            document.querySelector('#searchOnline .user' + user.id).setAttribute('style', 'color: red;');
        }
    }
    if (searchOnline) {
        socket.on('users.new', ({user}) => {
            onlineSearchPage(user);
        });

        socket.on('users.leave', ({user}) => {
            offlineSearchPage(user);
        })
    }

    // Chat
    // const msgHistory = document.getElementsByClassName('.msg_history');
    var msgForm = document.getElementById('send-message');
    // var button = document.getElementsByClassName('msg_send_btn');
    if (msgForm) {

        var token = document.getElementById('token').dataset.token;
        function decodeToken(token){
            var playload = JSON.parse(atob(token.split('.')[1]));
            return playload;

        }
        var user = decodeToken(token);

        msgForm.onsubmit = (e) => {
            e.preventDefault();
            var inputMessage = document.getElementById('write_msg');
            var toUser = document.getElementById('hiddenInput').value;
            socket.emit('newMsg', {message: inputMessage.value.trim(),
                fromUser: user.id,
                toUser: parseInt(toUser)
            });
            inputMessage.value = '';
            inputMessage.focus();
        }

        socket.on('displayMsg', (msg, date) => {
            var inputHidden = document.getElementById('hiddenInput').value;
            const chat = document.querySelector('.msg_history');
            const noMessage = document.getElementById('noMessage');
            const options = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric', minute: 'numeric' };
            // var sentMsg = document.getElementsByClassName('sent_msg');

            // console.log(typeof info);

            if (noMessage) {
                console.log('il ny avait pas de message, maintenant oui');
                noMessage.remove();
            }
            if (parseInt(inputHidden) === msg.to_user_id) {
                console.log('outgoing message: de ma part')
                // const outgoing = document.createElement('div');
                // outgoing.setAttribute('class', 'outgoing_msg');
                // const sentMsg = document.createElement('div');
                // sentMsg.setAttribute('class', 'sent_msg');

                // const p = document.createElement('p');
                // p.innerText = info.message;
                // const span = document.createElement('span');
                // span.setAttribute('class', 'time_date')
                // span.innerText = date.toLocaleDateString('fr-FR', options);
                // sentMsg.append(p);
                // sentMsg.append(span);
                // outgoing.append(sentMsg);
                // chat.append(outgoing);

            } else if (parseInt(inputHidden) === msg.from_user_id) {
                console.log('incoming message: pour moi')
                // const incoming = document.createElement('div');
                // incoming.setAttribute('class', 'incoming_msg');
                // const receivedMsg = document.createElement('div');
                // receivedMsg.setAttribute('class', 'received_msg');
                // const receivedMsgWith = document.createElement('div');
                // receivedMsgWith.setAttribute('class', 'received_withd_msg');
                // const p = document.createElement('p');
                // p.innerText = info.message;
                // const span = document.createElement('span');
                // span.setAttribute('class', 'time_date')
                // span.innerText = date.toLocaleDateString('fr-FR', options);
                // receivedMsgWith.append(p);
                // receivedMsgWith.append(span);
                // receivedMsg.append(receivedMsgWith);
                // incoming.append(receivedMsg);
                // chat.append(incoming);
            }
            // setTimeout(() => {
            //     chat.scrollTop = chat.scrollHeight + 500;
            // }, 10);

                // while (chat.firstChild) {
                //     chat.removeChild(chat.firstChild);
                // }

                // for (var x = 0; x < data.length; x++) {
            // chat.removeAttribute('style', 'text-align: center;');
                //     if (data[x].to_user_id === userId) {

                //     } else if (data[x].from_user_id === userId) {
                //
                //     }

        })
    }

</script>

</body>
<footer></footer>
</html>